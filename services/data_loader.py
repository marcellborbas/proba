import csv
from models import Department, Job, Location, Salary, Employee

class DataLoader:
    """
    üìÇ DataLoader oszt√°ly felel≈ës az adatok adatb√°zisba t√∂rt√©n≈ë bet√∂lt√©s√©√©rt.
    üîπ T√°bl√°k l√©trehoz√°sa √©s CSV f√°jlb√≥l t√∂rt√©n≈ë adatbet√∂lt√©s.
    """

    def __init__(self, db_service):
        """
        üîß Inicializ√°lja az adatb√°zis szolg√°ltat√°st.
        :param db_service: Az adatb√°zis kezel≈ë oszt√°ly p√©ld√°nya.
        """
        self.db_service = db_service

    def create_tables(self):
        """
        üõ†Ô∏è Az adatb√°zis t√°bl√°inak l√©trehoz√°sa az egyes modellek alapj√°n.
        """
        for model in [Department, Job, Location, Salary, Employee]:
            model.create_table(self.db_service)

    def load_data_from_csv(self, file_path):
        """
        üìä CSV f√°jl beolvas√°sa √©s az adatok bet√∂lt√©se az adatb√°zisba.
        :param file_path: A CSV f√°jl el√©r√©si √∫tvonala.
        """
        with open(file_path, mode='r', encoding='utf-8') as file:
            csv_reader = csv.DictReader(file)
            for row in csv_reader:
                # üìå Oszt√°lyokba tartoz√≥ adatok besz√∫r√°sa
                department_id = Department.insert_data(self.db_service, (row['department'],))
                job_id = Job.insert_data(self.db_service, (row['job'],))
                location_id = Location.insert_data(self.db_service, (row['location'],))
                salary_id = Salary.insert_data(self.db_service, (int(row['monthly_salary']),))

                # üö® Ellen≈ërz√©s: ha b√°rmelyik besz√∫r√°s sikertelen, a sor kimarad
                if None in (department_id, job_id, location_id, salary_id):
                    print(f"HIBA: Hi√°nyz√≥ √©rt√©k besz√∫r√°sn√°l: {row}")
                    continue  # Kihagyja ezt a sort √©s folytatja a k√∂vetkez≈ëvel

                # üë®‚Äçüíº Dolgoz√≥ adatainak besz√∫r√°sa
                self.insert_employee(row, department_id[0], job_id[0], location_id[0], salary_id[0])

    def insert_employee(self, row, department_id, job_id, location_id, salary_id):
        """
        üë®‚Äçüíº Dolgoz√≥ adatainak besz√∫r√°sa az adatb√°zisba.
        :param row: A dolgoz√≥ adatainak egy sora a CSV f√°jlb√≥l.
        :param department_id: A dolgoz√≥hoz tartoz√≥ oszt√°ly ID-ja.
        :param job_id: A dolgoz√≥ munkak√∂r√©nek ID-ja.
        :param location_id: A dolgoz√≥ munkav√©gz√©si hely√©nek ID-ja.
        :param salary_id: A dolgoz√≥ fizet√©s√©nek ID-ja.
        """
        query = f"""
        INSERT INTO {Employee.TABLE_NAME} (
            first_name, last_name, department_id, job_id, 
            location_id, hire_date, salary_id, absence_days
        )
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (first_name, last_name, hire_date) DO NOTHING;
        """
        params = (
            row['first_name'], row['last_name'], department_id, job_id,
            location_id, row['hire_date'], salary_id, int(row['absence_days'])
        )

        # üè¶ SQL lek√©rdez√©s v√©grehajt√°sa
        self.db_service.execute_query(query, params)
