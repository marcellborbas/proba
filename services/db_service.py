# services/db_service.py
import psycopg2
from config.database import DATABASE_CONFIG

HR_SCHEMA_QUERY = """
SELECT EXISTS(
    SELECT 1 FROM information_schema.schemata 
    WHERE schema_name = 'hr'
);
"""

class DatabaseService:
    """
    üè¶ DatabaseService oszt√°ly, amely kezeli az adatb√°zis kapcsolatot √©s lek√©rdez√©seket.
    üîπ Csatlakoz√°s, s√©ma l√©trehoz√°s √©s ellen≈ërz√©s, valamint SQL v√©grehajt√°s.
    """

    def __init__(self):
        """
        üîß Inicializ√°lja az adatb√°zis kapcsolatot √©s a s√©m√°t.
        """
        self.conn = None
        self.connect()
        self.create_schema()  # üìå S√©ma l√©trehoz√°sa csatlakoz√°s ut√°n
        self._check_schema_exists()  # üìå S√©ma l√©tez√©s√©nek ellen≈ërz√©se

    def connect(self):
        """
        üîå Adatb√°zis kapcsolat l√©trehoz√°sa a konfigur√°ci√≥ alapj√°n.
        """
        try:
            self.conn = psycopg2.connect(**DATABASE_CONFIG)
            #ez vesz√©lyes, gondolom tranzakci√≥ kezel√©s nem nagyon volt, de jobb lenne k√©zzel a tranzakci√≥s
            #hat√°rokat megh√∫zni - nice to have
            #tranzakci√≥ kezel√©s megn√©z√©se esetleg
            self.conn.autocommit = True
            print("‚úÖ Adatb√°zis kapcsolat l√©trej√∂tt")
        except Exception as e:
            print(f"‚ùå Kapcsol√≥d√°si hiba: {e}")
            raise

    def _check_schema_exists(self):
        """
        üõ†Ô∏è Ellen≈ërzi, hogy a 'hr' s√©ma l√©tezik-e az adatb√°zisban.
        """
        #ezt tal√°n ki lehetne k√ºl√∂n emelni valami statikus v√°ltoz√≥ba a f√°jl elej√©re
        #nem tudom, hogy pythonban ez mennyire pattern/anti-pattern

        query = HR_SCHEMA_QUERY
        result = self.execute_query(query, fetch_one=True)
        if not result[0]:
            raise RuntimeError("‚ùå A 'hr' s√©ma nem l√©tezik az adatb√°zisban!")

    def create_schema(self):
        """
        üèóÔ∏è L√©trehozza a 'hr' s√©m√°t, ha m√©g nem l√©tezik.
        """
        query = "CREATE SCHEMA IF NOT EXISTS hr;"
        self.execute_query(query)
        print("‚úÖ 'hr' s√©ma ellen≈ërizve/l√©trehozva")

    def execute_query(self, query, params=None, fetch_one=False):
        """
        üñ•Ô∏è SQL lek√©rdez√©s v√©grehajt√°sa.
        :param query: Az SQL lek√©rdez√©s sz√∂vege.
        :param params: Opcion√°lis param√©terek a lek√©rdez√©shez.
        :param fetch_one: Ha igaz, akkor csak egy eredm√©nyt ad vissza.
        :return: A lek√©rdez√©s eredm√©nye vagy a sorok sz√°ma.
        """
        try:
            with self.conn.cursor() as cur:
                cur.execute(query, params or ())
                if fetch_one:
                    return cur.fetchone()
                return cur.rowcount
        except Exception as e:#fel lehetne t√∂bb fajta exception-re k√©sz√≠teni - nice to have
            print(f"‚ùå Lek√©rdez√©si hiba: {e}")
            print(f"üßê Vizsg√°lt lek√©rdez√©s: {query}")
            raise

    def close(self):
        """
        üîå Bez√°rja az adatb√°zis kapcsolatot.
        """
        if self.conn and not self.conn.closed:#nice
            self.conn.close()
            print("üîå Kapcsolat lez√°rva")
