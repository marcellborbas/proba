# models/base_model.py

class BaseModel:
    """
    üîπ Egy absztrakt oszt√°ly, amely k√∂z√∂s met√≥dusokat biztos√≠t az adatb√°zisban l√©v≈ë modellek sz√°m√°ra.
    üîπ Az egyes lesz√°rmazott oszt√°lyoknak meg kell hat√°rozniuk a k√∂vetkez≈ë attrib√∫tumokat:
       - CREATE_TABLE_QUERY: Az adott t√°bla l√©trehoz√°s√°ra vonatkoz√≥ SQL lek√©rdez√©s.
       - TABLE_NAME: A t√°bla neve.
       - INSERT_QUERY: Az adat besz√∫r√°s√°ra vonatkoz√≥ SQL lek√©rdez√©s.
       - ID_COLUMN: Az els≈ëdleges kulcs oszlop neve.
       - LOOKUP_COLUMN: Az az oszlop, amely alapj√°n ellen≈ërizz√ºk, l√©tezik-e m√°r az adott rekord.
    """

    @classmethod
    def create_table(cls, db_service):
        """üõ†Ô∏è L√©trehozza az adott modellt reprezent√°l√≥ t√°bl√°t az adatb√°zisban."""
        try:
            db_service.execute_query(cls.CREATE_TABLE_QUERY)  # SQL lek√©rdez√©s v√©grehajt√°sa
            print(f"{cls.TABLE_NAME} t√°bla l√©trehozva")  # Sikeres l√©trehoz√°s visszajelz√©se
        except Exception as e:
            print(f"Hiba a {cls.TABLE_NAME} t√°bla l√©trehoz√°sakor: {e}")  # Hiba eset√©n √ºzenet
            raise  # Az adott hiba tov√°bb dob√°sa

    @classmethod
    def insert_data(cls, db_service, values):
        """üì• √öj rekord besz√∫r√°sa az adott t√°bl√°ba."""
        try:
            # SQL lek√©rdez√©s v√©grehajt√°sa √©s egy rekord visszak√©r√©se
            result = db_service.execute_query(cls.INSERT_QUERY, values, fetch_one=True)
            if not result:
                # Ha az adat m√°r l√©tezik, akkor lek√©rdezz√ºk az ID-j√°t
                result = cls._get_existing_id(db_service, values)
            return result  # Visszat√©r az √∫j vagy megl√©v≈ë rekord ID-j√°val
        except Exception as e:
            print(f" Hiba adat besz√∫r√°sakor ({cls.TABLE_NAME}): {e}")  # Hiba√ºzenet
            raise  # Az adott hiba tov√°bb dob√°sa

    @classmethod
    def _get_existing_id(cls, db_service, values):
        """üîç Lek√©rdezi a m√°r l√©tez≈ë rekord ID-j√°t az adott t√°bl√°b√≥l."""
        query = f"""
        SELECT {cls.ID_COLUMN} 
        FROM {cls.TABLE_NAME} 
        WHERE {cls.LOOKUP_COLUMN} = %s;
        """
        return db_service.execute_query(query, (values[0],), fetch_one=True)  # Lek√©rdez√©s v√©grehajt√°sa
